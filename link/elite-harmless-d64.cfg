# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2019,
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================

# this file describes the memory layout of Elite : Harmless for packing onto
# disk using Exomizer: <https://bitbucket.org/magli143/exomizer/wiki/Home>
#
# Exomizer uses ZIP-like compression to reduce the size of the payload.
# given multiple input memory blocks (stored as separate PRG files), Exomizer
# will compress these into a single PRG file and unpack the contents into the
# original memory locations upon execution. we split our game into separate
# programs where, on the Commodore 64, there are "empty" regions of memory
# space that are only used at runtime and do not need to be stored on disk
# e.g. the bitmap image; there's no need to store 8K of zeroes on disk

SYMBOLS {
    ELITE_BITMAP_ADDR:      type = export,  value = __VIC_BITMAP_RUN__;
    ELITE_MENUSCR_ADDR:     type = export,  value = __VIC_SCR_MENU_RUN__;
    ELITE_MAINSCR_ADDR:     type = export,  value = __VIC_SCR_MAIN_RUN__;
    ELITE_SPRITES_ADDR:     type = export,  value = __GFX_SPRITES_RUN__;
    ELITE_FONT_ADDR:        type = export,  value = __GFX_FONT_RUN__;
    ELITE_ZP_SHADOW:        type = export,  value = __ZP_SHADOW_RUN__;
    ELITE_DISK_BUFFER:      type = export,  value = __DISK_BUFFER_RUN__;
}

MEMORY {
    # the layout of segments consists of two sets of memory maps; the first,
    # where the code/data goes when the game is running, and an entirely
    # different layout for where that code/data goes in the disk-file 

    # C64 layout:
    #===========================================================================
    # this is only used to assign addresses for run-time, nothing is actually
    # written to disk for this layout
    #
    C64_RAM:    file = "",
                start = $0400,  size = $10000 - $0400;

    # disk files:
    #===========================================================================
    # INIT.PRG
    #---------------------------------------------------------------------------
    INIT_PRG:   file  = "bin/init.prg",
                start = %S - 2,     size = $0002;

    INIT:       file  = "bin/init.prg",
                start = %S,         size = $0700 - %S;
    
    # PRG1.PRG
    #---------------------------------------------------------------------------
    PRG1_PRG:   file  = "bin/prg1.prg",
                start = $0900 - 2,  size = $0002;

    PRG1:       file  = "bin/prg1.prg",
                start = $0900,      size = $4000 - $0900;

    # PRG2.PRG
    #---------------------------------------------------------------------------
    PRG2_PRG:   file  = "bin/prg2.prg",
                start = $4000 - 2,  size = $0002;

    PRG2:       file  = "bin/prg2.prg",
                start = $4000,      size = $2000;

    # PRG3.PRG
    #---------------------------------------------------------------------------
    PRG3_PRG:   file  = "bin/prg3.prg",
                start = $6800 - 2,  size = $0002;

    PRG3:       file  = "bin/prg3.prg",
                start = $6800,      size = $10000 - $6800;
}

SEGMENTS {

    # working variable space (not written to disk)
    VARS_MAIN:      load = C64_RAM, run = C64_RAM,
                    type = bss,     define = yes;

    # when drawing lines, the X & Y points are queued up here for drawing
    # lines in batches. in the original game, this area is full of junk data
    # and stored as part of the PRG-file. in elite-harmless we make it a
    # reserved chunk of RAM without including in the disk-file
    LINE_DATA:      load = C64_RAM, run = C64_RAM,
                    type = bss,     align = 256;

    #---------------------------------------------------------------------------

    INIT_PRG:       load = INIT_PRG;
    CODE_INIT:      load = INIT;

    #---------------------------------------------------------------------------

    PRG1_PRG:       load = PRG1_PRG;
    
    GFX_FONT:       load = PRG1,    align_load = 256,
                    run  = C64_RAM, align      = 256,   define = yes;
    
    TEXT_FLIGHT:    load = PRG1,    run = C64_RAM;
    TEXT_DOCKED:    load = PRG1,    run = C64_RAM,  define = yes;
    TEXT_TOKENS:    load = PRG1,    run = C64_RAM;
    TEXT_PAIRS:     load = PRG1,    run = C64_RAM;
    TEXT_PDESC:     load = PRG1,    run = C64_RAM;

    VARS_USER:      load = PRG1,    run = C64_RAM;

    CODE_LORAM:     load = PRG1,    run = C64_RAM;
    
    SAVE_DATA:      load = PRG1,    run = C64_RAM,  define = yes;
    SAVE_DEFAULT:   load = PRG1,    run = C64_RAM;
    
    #---------------------------------------------------------------------------
    # the bitmap can be placed in either the lower or upper half of the VIC
    # bank (it's 8 KB) and the character set can be placed at any 2 KB offset
    #
    # the source code will use the address assigned by this segment
    # placement, it's not defined anywhere in the source code!
    #
    VIC_BITMAP:     type = bss, load = C64_RAM, align = $2000,  define = yes;
    
    # elite uses two 'text' screens (although they hold colour information
    # when used with the bitmap), one for the "main view" (cockpit) and
    # another for the "menu view", the menu screens that hide the HUD
    VIC_SCR_MENU:   type = bss, load = C64_RAM, align = $0400,  define = yes;
    VIC_SCR_MAIN:   type = bss, load = C64_RAM, align = $0400,  define = yes;

    #---------------------------------------------------------------------------

    PRG2_PRG:       load = PRG2_PRG;

    HUD_COLORSCR:   load = PRG2,    define = yes;

    # the colour-nybbles for the bitmap HUD have to be placed in the colour RAM
    # which resides outside of the C64's main memory -- colour RAM has to be
    # banked in over the top of $D800..$DBE7 -- therefore our colour-nybbles
    # must be stored somewhere temporary and written into colour RAM during
    # game initialisation
    HUD_COLORRAM:   load = PRG2,    define = yes;

    #---------------------------------------------------------------------------

    PRG3_PRG:       load = PRG3_PRG;

    # sprite data *MUST* exist within the VIC-II bank! for a VIC-II bank of
    # $4000, the sprite data must end no later than $8000! this is why this
    # segment must be placed early here
    GFX_SPRITES:    load = PRG3,     align_load = 64
                    run  = C64_RAM,  align      = 64,   define = yes;

    # the sine table is also 64-bytes so aligns well against the sprites
    TABLE_SIN:      load = PRG3,    run = C64_RAM;

    MATH_LOGS:      load = PRG3,    align_load = 256,
                    run  = C64_RAM, align      = 256;

    # note that the sound code relies heavily on page-boundaries even though
    # the original game didn't align it -- it worked by happenstance!
    CODE_SOUND:     load = PRG3,    align_load = 256,
                    run  = C64_RAM, align      = 256;
    DATA_SOUND:     load = PRG3,    run  = C64_RAM;

    # for elite-harmless, this table is trimmed from 256 bytes down to 200.
    # whilst it doesn't have to be aligned, it is used very often and alignment
    # saves cycles. due to the now-shorter length, we want to place it where
    # it begins aligned, but is followed by something un-aligned, such as code
    TABLE_BITMAP_LO:load = PRG3,    run = C64_RAM;
    
    CODE_6A00:      load = PRG3,    run = C64_RAM;
    CODE_9900:      load = PRG3,    run = C64_RAM;
    
    TABLE_BITMAP_HI:load = PRG3,    run = C64_RAM;

    HULL_TABLE:     load = PRG3,    run  = C64_RAM;
    HULL_D042:      load = PRG3,    run  = C64_RAM;
    HULL_D062:      load = PRG3,    run  = C64_RAM;
    HULL_D083:      load = PRG3,    run  = C64_RAM;
    HULL_DATA:      load = PRG3,    run  = C64_RAM;
    HUD_DATA:       load = PRG3,    run  = C64_RAM,     define = yes;

    #---------------------------------------------------------------------------
    # lookup tables for fast multiplication, consisting
    # of two 512-entry tables of 16-bit numbers (2 KB)
    TABLE_SQR:      type = bss,     align    = 256,
                    load = C64_RAM, optional = yes,     define   = yes;
    
    # used as a backup of the zero-page during some operations, though I am not
    # yet certain of the specifics. in the original game, this is at $CE00
    ZP_SHADOW:      type = bss,
                    load = C64_RAM, align = 256,    define = yes;

    DISK_BUFFER:    type = bss,
                    load = C64_RAM, align = 256,    define = yes;

    # the runtime storage for poly-objects (ships, asteroids, etc) in-play;
    # since this is variable space and not part of the on-disk code / data,
    # its type is "bss" which excludes it from being written to disk
    POLYOBJS:       type = bss,
                    load = C64_RAM;
}